string1 = input().split()
print("-".join(string1))

# o/p:
# this is a string
# this-is-a-string
--------------------------------------------------------------------------------------------------------------------------
string = input().split()
n = int(input())
my_dict = {i:string.count(i) for i in string}
remove_list=[]
for i,j in my_dict.items():
    if j >= n:
        remove_list.append(i)
print(" ".join(remove_list))


o/p:
cat batman latt matter cat matter cat cat latt latt  
3
cat latt
--------------------------------------------------------------------------------------------------------------------------
Set:
    set objecct can be created by using '{}' or by calling the set finction
    set is mutable object 
    duplicate element are not allowed in the set
    insertion order is not preserved 
    set doesn't support indexing and slicing
    set is a collection of homogeneous and hetrogeneous elements
    set is mainly used to perform mathematical set operations like union, intersection, diiference and symmetric difference and so on

>>> s={}
>>> type(s)
<class 'dict'>
>>> s={10}
>>> type(s)
<class 'set'>
>>> s=set()
>>> type(s)
<class 'set'>
>>> s={10,23,34,45}
>>> print(s)
{10, 34, 45, 23}
>>> s={12,23,34,45,12,23}
>>> print(s)
{34, 12, 45, 23}
>>> s[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>>
>>> s
{34, 12, 45, 23}
>>> s.add(78)
>>> s
{34, 12, 45, 78, 23}
>>>
--------------------------------------------------------------------------------------------------------------------------
s=input()
r=set(s)
l=list(r)
l.sort()
for i in l:
    print(i," = ",s.count(i))

# o/p:
# 2334
# 2  =  1
# 3  =  2
# 4  =  1
--------------------------------------------------------------------------------------------------------------------------
# aabccde ------? a2b1c2d1e1
string = input()
r = set(string)
li = list(r)
li.sort()
res=''
for i in li:
    res+=i+str(string.count(i))
print(res)


# o/p:
# aabccde
# a2b1c2d1e1
--------------------------------------------------------------------------------------------------------------------------
string = input()
r = set(string)
li = list(r)
li.sort()
for i in li:
    if string.count(i) > 1:
        # print(i,"-",string.count(i),end=" ")
        print(f"{i}-{string.count(i)}",end=" ")


# o/p:
# aabbbcd
# a-2 b-3
--------------------------------------------------------------------------------------------------------------------------
Mathematical Operations on Sets:

>>> a={1,2,3,4,5}
>>> b={4,5,6,7,8}
>>> a.union(b)
{1, 2, 3, 4, 5, 6, 7, 8}
>>> a|b
{1, 2, 3, 4, 5, 6, 7, 8}
>>> a.intersection(b)
{4, 5}
>>> a&b
{4, 5}
>>> a-b
{1, 2, 3}
>>> b-a
{8, 6, 7}
>>> a^b
{1, 2, 3, 6, 7, 8}
>>> a.difference(b)
{1, 2, 3}
>>> a.symmetric_difference(b)
{1, 2, 3, 6, 7, 8}
>>>
--------------------------------------------------------------------------------------------------------------------------
n = int(input())
a_list = list(map(int, input().split()))[:n]
n = int(input())
b_list = list(map(int, input().split()))[:n]
a_set = set(a_list)
b_set = set(b_list)
res = list(a_set^b_set)
res.sort()
for i in res:
    print(i)
    
# i/P:  
# 4
# 2 4 5 9
# 4 
# 2 4 11 12
# o/p:
# 5
# 9
# 11
# 12
--------------------------------------------------------------------------------------------------------------------------
n = int(input())
a_list = list(map(int, input().split()))[:n]
n = int(input())
b_list = list(map(int, input().split()))[:n]
a_set = set(a_list)
b_set = set(b_list)
li = list(a_set.union(b_set))
print(len(li))

# i/p:
# 9
# 1 2 3 4 5 6 7 8 9
# 9
# 10 1 2 3 11 21 55 6 8
# o/p:
# 13
--------------------------------------------------------------------------------------------------------------------------
Methods of sets:

s={1,2,3,4,5}
>>> s.add(6)
>>> s
{1, 2, 3, 4, 5, 6}
>>> s.remove(4)
>>> s
{1, 2, 3, 5, 6}
>>> s.discard(3)
>>> s
{1, 2, 5, 6}
>>> s.remove(7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 7
>>> s.discard(7)
>>> s
{1, 2, 5, 6}
>>> s.pop()
1
>>> s
{2, 5, 6}
>>> s.clear()
>>> s
set()
>>> s={1,2,3,4,5}
>>> r={4,5,6,7,8}
>>> s.intersection(r)
{4, 5}
>>> s
{1, 2, 3, 4, 5}
>>> s={1,2,3,4,5}
>>> r={4,5,6,7,8}
>>> s.intersection_update(r)
>>> s
{4, 5}
>>>

--------------------------------------------------------------------------------------------------------------------------
Methods of Dictionary:

s={'a':10, 'b':20, 'c':30}
>>> s
{'a': 10, 'b': 20, 'c': 30}
>>> s.update({'d':40})
>>> s
{'a': 10, 'b': 20, 'c': 30, 'd': 40}
>>> s.update({'e':50, 'f':60})
>>> s
{'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50, 'f': 60}
>>> s.popitem()
('f', 60)
>>> s
{'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}
>>> s.pop('b')
20
>>> s
{'a': 10, 'c': 30, 'd': 40, 'e': 50}
>>> del s['c']
>>> s
{'a': 10, 'd': 40, 'e': 50}
>>> s.clear()
>>> s
{}
>>>
--------------------------------------------------------------------------------------------------------------------------
string1 = input()
string2 = input()

set1 = set(string1)
set2 = set(string2)

res_list = list(set1.intersection(set2))
res_list.sort()

res=''
for i in res_list:
    res += i
print(res)


# i/p:
# beads
# leaps
# o/p:
# aes
--------------------------------------------------------------------------------------------------------------------------
