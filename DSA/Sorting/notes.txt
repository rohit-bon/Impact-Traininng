Sorting Algorithms in Python:
    python supports different sorting algorithms (7)
        1. Bubble Sort
        2. Selection Sort
        3. Insertion Sort
        4. Merge Sort
        5. Quick Sort
        6. Radix Sort (Frequency Sort)
        7. Heap Sort
    
    Bubble Sort:
        Bubble Sort is worst sorting algorithm as compare to all other algorithm 
        In the bubble sort we have to commpare the adjecent element if the element are not sorted then we have to sort
        Bubble Sort will arrange the elements in ascending order or descending order
        for ascending order we have to use > symbol, for descending we have to use < symbol for comparision

    Selection Sort:
        In the Selection Sort the first element will be considered as minimum element in the list then remaining all elements will be compared with first element if any element is less than the minimum element first then extend the index position of minimum index, after all comparisions the minimum value will be move to first location

    Merge Sort:
        Merge Sort works on the principle of Divide and Conquer technique 
        first we have to divide the lis into 2 equal parts i.e. len(l)//2, this division is possible until the len = 1 
        for dividing the elements into equal parts we are using recursionn technique 
        during comparision we are going to compare left side value with the right side value if left side value is less than right side value then left side value will come first if condition is false then right side value will comme first.
    

    Quick Sort:
        Step1:  Consider the first element as pivot
        Step2:  Initalize i to low and j to high
        step3:  Repeat the following steps until i < j
                    keep on incrementing a[i] <= pivot 
                    keep on decrementing a[j] > pivot 
        step4:  if i < j then swap a[i], a[j] 
        step5:  if i > j then swap a[j], pivot 

        30 20 10 50 60 40
        pivot = 30
        i=0
        j=len(a) - 1 = 5
        0<5
        ---> a[i] <= pivot
        30<=30 --> i=1
        20<=30 --> i=2
        10<=30 --> i=3
        50<=30(False) i=3
        a[j]>pivot
        40>30 --> j=4
        60>30 --> j=3
        50>30 --> j=2
        10>30 -- False(j=2)
        cond false
        i=3, j=2
        swap --> a[j], pivot
        a[2], a[0]
        10 20 30 50 60 40
        return pivot index --> 2
        10 20 30
        50 60 40
        CONTINUE THE PROCEDURE IN LOOP
        50 60 40
        i=0
        j=2
        a[i]<=pivot --> 50<=50
        i=1
        60<=50 --> false --> i=1
        a[j]>pivot
        40>50 --> false --> j=2
        false i=1, j=2 
        a[i],a[j]
        a[1],a[2]
        50 40 60
        CONTINUE THE PROCEDURE IN LOOP
        50 40 60
        i=0
        j=2
        pivot = 50
        a[i]<=pivot --> 50<=50
        i=1
        40<=50 --> i=2
        60<=50 --> false -->i=2
        a[j]>pivot
        60>50 --> j=1
        40>50 --> false
        i=2, j=1
        j, pivot
        a[1], a[0]
        40 50 60





Write a program for implementation Bubble Sort with function approach

Bubble sort:

def bubble_sort(my_list):
    for i in range(len(my_list)-1):
        for j in range(len(my_list)-1):
            if my_list[j] > my_list[j+1]:
                my_list[j],my_list[j+1]=my_list[j+1],my_list[j]
    return my_list

my_list = list(map(int,input().split()))
my_list = bubble_sort(my_list)
print(*my_list)


Selection Sort:

def selection_sort(my_list):
    for i in range(len(my_list)):
        min_index = i
        for j in range(i+1, len(my_list)):
            if my_list[min_index]>my_list[j]:
                min_index = j
        my_list[min_index],my_list[i] = my_list[i],my_list[min_index]
        # print(my_list)
    return my_list

my_list = list(map(int,input().split()))
my_list = selection_sort(my_list)
print(*my_list)



Merge Sort:


def merge(left,right):
    my_list = []
    i=0
    j=0
    while i<len(left) and j<len(right):
        if left[i]<right[j]:
            my_list.append(left[i])
            i+=1
        else:
            my_list.append(right[j])
            j+=1
    my_list = my_list + left[i:] + right[j:]
    return my_list

def merge_sort(my_list):
    if len(my_list) == 1:
        return my_list
    else:
        mid = len(my_list)//2
        left = merge_sort(my_list[:mid])
        right = merge_sort(my_list[mid:])
    return merge(left,right)

my_list = list(map(int, input().split()))
my_list = merge_sort(my_list)
print(*my_list)



Quick Sort:

def partition(i,j,l):
    pi = i
    pivot = l[i]
    while i<j:
        while l[i]<=pivot and i<len(l):
            i+=1
        while l[j]>pivot:
            j-=1
        if i<j:
            l[i], l[j] = l[j], l[i]
            print(l)
            
    l[j], l[pi] = l[pi], l[j]
    print(l)
    return j

def quick_sort(i,j,l):
    if i<j:
        p = partition(i,j,l)
        quick_sort(i, p-1, l)
        quick_sort(p+1, j, l)
        
l=[30,20,10,50,60,40]
print("Before Sortinng: ",l)
quick_sort(0,len(l)-1,l)
print("After Sorting: ",l)




Radix Sort:
~ Radix sort is linear sorting algorithm that sorts the elements by processing them digit by digit.
~ It is an effefcient sorting algorithm for integers or strings with fixed size
~ The key idea behind the Radix sort is concept of place value.
~ It assumes that sorting numbers digit by digit will result in a fully sorted list.
~ Radix sort can be performed using different variations such as LSD[Least significant Digit] radix sort and MSD[Most significant Digit] radix sort.

Algorithm:-

array = [170, 45, 75, 90, 802, 24, 2, 66]
1. Find the largest element in the array.
    l = 802 
2. It has 3 digits, we will iterate three times one for each significant step.
   2.1 Sort the elements based on the unit place digit.
       (We use a stable sorting technique such as counting sort to sort the digit at each significant place.) 

       [170, 90, 2, 802, 24, 45, 75, 66]

   2.2 Sort the elemnts based on the tense place digit.
       [2, 802, 24, 45, 66, 170, 75, 90]

   2.3 Sort the element based on hundredth place digit.
       [2, 24, 45, 66, 75, 90, 170, 802]

3. The array is now sorted in ascending order, the final sorted array using radix sorted array using radix sort is
   [2, 24, 45, 66, 75, 90, 170, 802]

def countingSort(arr, exp1):
  n = len(arr)
  # THe output array elements that will have sorted arr
  output = [0] * (n)
  # initialize count array as 0
  count = [0] * (10)
  # store count of occurance in count[]
  for i in range(0, n):
    index = arr[i] // exp1
    count[index % 10] += 1

  # change coutn[i] so that count[i] now contains actual
  # position of this digit in output array 
  for i in range(1, 10):
    count[i] += count[i-1]

  # Build the output array
  i  = n-1 
  while(i>=0):
        index = arr[i] // exp1
        output[count[index%10]-1] = arr[i]
        count[index % 10] -= 1
        i-=1

 # Copying the output array to arr[]
 # so that arr now contains sorted numbers
  i = 0
  for i in range(0, len(arr)):
    arr[i] = output[i]
  print(arr)
# method to do radix sort

def radixSort(arr):
  # Find the maximum number to know number of 
  max1 = max(arr)
  # Do counting sort for every digit, Note that instead of passsing digit number, exp is passed. exp is 10^i where i is current digit number
  exp = 1
  while max1 / exp >= 1:
    countingSort(arr, exp)
    exp *= 10

# Driver code
arr = [ 170, 45 ,75, 90, 802, 24, 2, 66]

# Function call
radixSort(arr)

for i in range(len(arr)):
  print(arr[i],end = " ")